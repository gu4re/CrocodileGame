# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GLEW_PATH: libraries/glew
  GLFW_PATH: libraries/glfw
  GLM_PATH: libraries/glm
  ASSIMP_PATH: libraries/assimp
  FREEIMAGE_PATH: libraries/freeimage

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Use Custom MinGW
      run: |
        echo "Adding custom MinGW to PATH"
        $env:PATH = "${{github.workspace}}\compiler\MinGW\bin"
        echo $env:PATH

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=Release -G "MinGW Makefiles"
        echo "GLEW_PATH: ${{ env.GLEW_PATH }}"
        echo "GLFW_PATH: ${{ env.GLFW_PATH }}"

    - name: Build
      # Build your program with the given configuration
      run: cmake .. & make
